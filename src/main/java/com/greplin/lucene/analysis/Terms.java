package com.greplin.lucene.analysis;

import com.google.common.collect.Lists;
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.TokenStream;
import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
import org.apache.lucene.index.Term;

import javax.annotation.Nullable;
import java.io.IOException;
import java.io.StringReader;
import java.util.List;

/**
 * Term analysis utilities.
 */
public final class Terms {

  /** Not instantiable. */
  private Terms() { }

  /**
   * Returns an array of Terms generated by the passed string.
   * @param analyzer - the analyzer used to tokenize the index
   * @param field - the field to match on
   * @param query - The un-tokenized string
   * @return array of Terms
   */
  @Nullable
  public static Term[] termsFor(
      final Analyzer analyzer, final String field, final String query) {
    if (query == null) {
      return null;
    }
    TokenStream tokens = analyzer.tokenStream("", new StringReader(query));
    List<Term> terms = Lists.newArrayList();
    try {
      boolean anyTokens = false;
      while (tokens.incrementToken()) {
        anyTokens = true;
        String word = tokens.getAttribute(CharTermAttribute.class).toString();
        terms.add(new Term(field, word));
      }

      if (anyTokens) {
        return terms.toArray(new Term[terms.size()]);
      } else {
        return null;
      }

    } catch (IOException e) {
      return null;
    }
  }

}
